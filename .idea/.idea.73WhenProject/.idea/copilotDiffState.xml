<?xml version="1.0" encoding="UTF-8"?>
<project version="4">
  <component name="CopilotDiffPersistence">
    <option name="pendingDiffs">
      <map>
        <entry key="$PROJECT_DIR$/Assets/Scripts/DataPersistence/GameData.cs">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/Assets/Scripts/DataPersistence/GameData.cs" />
              <option name="originalContent" value="using System.Collections;&#10;using System.Collections.Generic;&#10;using UnityEngine;&#10;&#10;[System.Serializable]&#10;public class GameData&#10;{&#10;    public long lastUpdateted;&#10;    &#10;    public int countTest;&#10;    &#10;    public Vector3  playerPosition;&#10;    &#10;    public SerializableDictionary&lt;string, bool&gt;  itemsCollected;&#10;&#10;    &#10;    public GameData()&#10;    {&#10;        this.countTest = 0;&#10;        playerPosition = new Vector3(0, 0.5f, 0);&#10;        itemsCollected = new SerializableDictionary&lt;string, bool&gt;();    &#10;    }&#10;    &#10;    public float GetPercentageComplete()&#10;    {&#10;        int maxCount = 100;&#10;        &#10;        float percentage = (float)countTest / maxCount * 100f;&#10;&#10;        return percentage;&#10;    }&#10;}&#10;" />
              <option name="updatedContent" value="using System.Collections;&#10;using System.Collections.Generic;&#10;using UnityEngine;&#10;&#10;[System.Serializable]&#10;public class GameData&#10;{&#10;    public long lastUpdateted;&#10;    &#10;    public int countTest;&#10;    &#10;    public Vector3  playerPosition;&#10;    &#10;    public SerializableDictionary&lt;string, bool&gt;  itemsCollected;&#10;&#10;    public List&lt;InventoryItemData&gt; generalInventory;&#10;    public List&lt;InventoryItemData&gt; journalInventory;&#10;    public List&lt;InventoryItemData&gt; questInventory;&#10;&#10;    &#10;    public GameData()&#10;    {&#10;        this.countTest = 0;&#10;        playerPosition = new Vector3(0, 0.5f, 0);&#10;        itemsCollected = new SerializableDictionary&lt;string, bool&gt;();    &#10;        generalInventory = new List&lt;InventoryItemData&gt;();&#10;        journalInventory = new List&lt;InventoryItemData&gt;();&#10;        questInventory = new List&lt;InventoryItemData&gt;();&#10;    }&#10;    &#10;    public float GetPercentageComplete()&#10;    {&#10;        int maxCount = 100;&#10;        &#10;        float percentage = (float)countTest / maxCount * 100f;&#10;&#10;        return percentage;&#10;    }&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/Assets/Scripts/Item/InventoryItemData.cs">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/Assets/Scripts/Item/InventoryItemData.cs" />
              <option name="updatedContent" value="using System;&#10;&#10;[Serializable]&#10;public class InventoryItemData&#10;{&#10;    public string itemName;&#10;    public int quantity;&#10;    public string itemDescription;&#10;    public ItemType itemType;&#10;    // You cannot serialize Sprite, so store a reference key if needed (e.g., itemName)&#10;    // public string spriteKey;&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/Assets/Scripts/Item/InventoryManager.cs">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/Assets/Scripts/Item/InventoryManager.cs" />
              <option name="originalContent" value="using UnityEngine;&#10;&#10;public class InventoryManager : MonoBehaviour, IDataPersistence&#10;{&#10;    public ItemSlot[] generalSlots;&#10;    public ItemSlot[] journalSlots;&#10;    public ItemSlot[] questItemSlots;&#10;    public ItemSO [] itemSOs;&#10;&#10;    public bool UseItem(string itemName)&#10;    {&#10;        for (int i = 0; i &lt; itemSOs.Length; i++)&#10;        {&#10;            if (itemSOs[i].itemName == itemName)&#10;            {&#10;                bool usable = itemSOs[i].UseItem();&#10;                return usable;&#10;            }&#10;        }&#10;        return false;&#10;    }&#10;    &#10;    public void AddItem(string itemName, int quantity, Sprite itemIcon, ItemType itemType, string itemDescription)&#10;    {&#10;        ItemSlot[] targetSlots = null;&#10;&#10;        switch (itemType)&#10;        {&#10;            case ItemType.General:&#10;                targetSlots = generalSlots;&#10;                break;&#10;            case ItemType.Journal:&#10;                targetSlots = journalSlots;&#10;                break;&#10;            case ItemType.QuestItem:&#10;                targetSlots = questItemSlots;&#10;                break;&#10;        }&#10;&#10;        if (targetSlots == null) return;&#10;&#10;        // STEP 1: Stack to existing slots&#10;        for (int i = 0; i &lt; targetSlots.Length; i++)&#10;        {&#10;            if (targetSlots[i].isFull &amp;&amp; targetSlots[i].itemName == itemName)&#10;            {&#10;                quantity = targetSlots[i].AddItem(itemName, quantity, itemIcon, itemDescription);&#10;                if (quantity &lt;= 0)&#10;                    return; // เสร็จแล้ว&#10;            }&#10;        }&#10;&#10;        // STEP 2: Add to empty slots&#10;        for (int i = 0; i &lt; targetSlots.Length; i++)&#10;        {&#10;            if (!targetSlots[i].isFull)&#10;            {&#10;                quantity = targetSlots[i].AddItem(itemName, quantity, itemIcon, itemDescription);&#10;                if (quantity &lt;= 0)&#10;                    return; // เสร็จแล้ว&#10;            }&#10;        }&#10;&#10;        // ถ้ายังเหลือ quantity แสดงว่า inventory เต็มแล้ว&#10;        if (quantity &gt; 0)&#10;        {&#10;            Debug.LogWarning($&quot;Inventory เต็ม: เก็บ {itemName} ไม่หมด เหลือ {quantity} ชิ้น&quot;);&#10;        }&#10;    }&#10;    &#10;    public void DeselectAllSlots()&#10;    {&#10;        // Deselect general slots&#10;        foreach (ItemSlot slot in generalSlots)&#10;        {&#10;            slot.selectedShader.SetActive(false);&#10;            slot.isSelected = false;&#10;        }&#10;&#10;        // Deselect journal slots&#10;        foreach (ItemSlot slot in journalSlots)&#10;        {&#10;            slot.selectedShader.SetActive(false);&#10;            slot.isSelected = false;&#10;        }&#10;&#10;        // Deselect quest item slots&#10;        foreach (ItemSlot slot in questItemSlots)&#10;        {&#10;            slot.selectedShader.SetActive(false);&#10;            slot.isSelected = false;&#10;        }&#10;    }&#10;&#10;    // IDataPersistence implementation&#10;    public void LoadData(GameData gameData)&#10;    {&#10;        // Clear all slots&#10;        foreach (var slot in generalSlots) slot.ClearSlot();&#10;        foreach (var slot in journalSlots) slot.ClearSlot();&#10;        foreach (var slot in questItemSlots) slot.ClearSlot();&#10;&#10;        // Helper to get Sprite from ItemSO by itemName&#10;        Sprite GetSprite(string name)&#10;        {&#10;            foreach (var so in itemSOs)&#10;                if (so.itemName == name)&#10;                    return so is null ? null : so.GetSprite();&#10;            return null;&#10;        }&#10;&#10;        int i = 0;&#10;        foreach (var data in gameData.generalInventory)&#10;        {&#10;            if (i &gt;= generalSlots.Length) break;&#10;            generalSlots[i].AddItem(data.itemName, data.quantity, GetSprite(data.itemName), data.itemDescription);&#10;            i++;&#10;        }&#10;        i = 0;&#10;        foreach (var data in gameData.journalInventory)&#10;        {&#10;            if (i &gt;= journalSlots.Length) break;&#10;            journalSlots[i].AddItem(data.itemName, data.quantity, GetSprite(data.itemName), data.itemDescription);&#10;            i++;&#10;        }&#10;        i = 0;&#10;        foreach (var data in gameData.questInventory)&#10;        {&#10;            if (i &gt;= questItemSlots.Length) break;&#10;            questItemSlots[i].AddItem(data.itemName, data.quantity, GetSprite(data.itemName), data.itemDescription);&#10;            i++;&#10;        }&#10;    }&#10;&#10;    public void SaveData(GameData gameData)&#10;    {&#10;        gameData.generalInventory.Clear();&#10;        gameData.journalInventory.Clear();&#10;        gameData.questInventory.Clear();&#10;        &#10;        foreach (var slot in generalSlots)&#10;        {&#10;            if (!string.IsNullOrEmpty(slot.itemName) &amp;&amp; slot.quantity &gt; 0)&#10;            {&#10;                gameData.generalInventory.Add(new InventoryItemData {&#10;                    itemName = slot.itemName,&#10;                    quantity = slot.quantity,&#10;                    itemDescription = slot.itemDescription,&#10;                    itemType = ItemType.General&#10;                });&#10;            }&#10;        }&#10;        foreach (var slot in journalSlots)&#10;        {&#10;            if (!string.IsNullOrEmpty(slot.itemName) &amp;&amp; slot.quantity &gt; 0)&#10;            {&#10;                gameData.journalInventory.Add(new InventoryItemData {&#10;                    itemName = slot.itemName,&#10;                    quantity = slot.quantity,&#10;                    itemDescription = slot.itemDescription,&#10;                    itemType = ItemType.Journal&#10;                });&#10;            }&#10;        }&#10;        foreach (var slot in questItemSlots)&#10;        {&#10;            if (!string.IsNullOrEmpty(slot.itemName) &amp;&amp; slot.quantity &gt; 0)&#10;            {&#10;                gameData.questInventory.Add(new InventoryItemData {&#10;                    itemName = slot.itemName,&#10;                    quantity = slot.quantity,&#10;                    itemDescription = slot.itemDescription,&#10;                    itemType = ItemType.QuestItem&#10;                });&#10;            }&#10;        }&#10;    }&#10;}" />
              <option name="updatedContent" value="using UnityEngine;&#10;&#10;public class InventoryManager : MonoBehaviour, IDataPersistence&#10;{&#10;    public ItemSlot[] generalSlots;&#10;    public ItemSlot[] journalSlots;&#10;    public ItemSlot[] questItemSlots;&#10;    public ItemSO [] itemSOs;&#10;&#10;    public bool UseItem(string itemName)&#10;    {&#10;        for (int i = 0; i &lt; itemSOs.Length; i++)&#10;        {&#10;            if (itemSOs[i].itemName == itemName)&#10;            {&#10;                bool usable = itemSOs[i].UseItem();&#10;                return usable;&#10;            }&#10;        }&#10;        return false;&#10;    }&#10;    &#10;    public void AddItem(string itemName, int quantity, Sprite itemIcon, ItemType itemType, string itemDescription)&#10;    {&#10;        ItemSlot[] targetSlots = null;&#10;&#10;        switch (itemType)&#10;        {&#10;            case ItemType.General:&#10;                targetSlots = generalSlots;&#10;                break;&#10;            case ItemType.Journal:&#10;                targetSlots = journalSlots;&#10;                break;&#10;            case ItemType.QuestItem:&#10;                targetSlots = questItemSlots;&#10;                break;&#10;        }&#10;&#10;        if (targetSlots == null) return;&#10;&#10;        // STEP 1: Stack to existing slots&#10;        for (int i = 0; i &lt; targetSlots.Length; i++)&#10;        {&#10;            if (targetSlots[i].isFull &amp;&amp; targetSlots[i].itemName == itemName)&#10;            {&#10;                quantity = targetSlots[i].AddItem(itemName, quantity, itemIcon, itemDescription);&#10;                if (quantity &lt;= 0)&#10;                    return; // เสร็จแล้ว&#10;            }&#10;        }&#10;&#10;        // STEP 2: Add to empty slots&#10;        for (int i = 0; i &lt; targetSlots.Length; i++)&#10;        {&#10;            if (!targetSlots[i].isFull)&#10;            {&#10;                quantity = targetSlots[i].AddItem(itemName, quantity, itemIcon, itemDescription);&#10;                if (quantity &lt;= 0)&#10;                    return; // เสร็จแล้ว&#10;            }&#10;        }&#10;&#10;        // ถ้ายังเหลือ quantity แสดงว่า inventory เต็มแล้ว&#10;        if (quantity &gt; 0)&#10;        {&#10;            Debug.LogWarning($&quot;Inventory เต็ม: เก็บ {itemName} ไม่หมด เหลือ {quantity} ชิ้น&quot;);&#10;        }&#10;    }&#10;    &#10;    public void DeselectAllSlots()&#10;    {&#10;        // Deselect general slots&#10;        foreach (ItemSlot slot in generalSlots)&#10;        {&#10;            slot.selectedShader.SetActive(false);&#10;            slot.isSelected = false;&#10;        }&#10;&#10;        // Deselect journal slots&#10;        foreach (ItemSlot slot in journalSlots)&#10;        {&#10;            slot.selectedShader.SetActive(false);&#10;            slot.isSelected = false;&#10;        }&#10;&#10;        // Deselect quest item slots&#10;        foreach (ItemSlot slot in questItemSlots)&#10;        {&#10;            slot.selectedShader.SetActive(false);&#10;            slot.isSelected = false;&#10;        }&#10;    }&#10;&#10;    // IDataPersistence implementation&#10;    public void LoadData(GameData gameData)&#10;    {&#10;        if (gameData == null)&#10;        {&#10;            Debug.LogError(&quot;GameData is null in InventoryManager.LoadData&quot;);&#10;            return;&#10;        }&#10;        if (generalSlots == null || journalSlots == null || questItemSlots == null)&#10;        {&#10;            Debug.LogError(&quot;InventoryManager slot arrays are not assigned in the Inspector.&quot;);&#10;            return;&#10;        }&#10;        if (itemSOs == null)&#10;        {&#10;            Debug.LogError(&quot;InventoryManager itemSOs array is not assigned in the Inspector.&quot;);&#10;            return;&#10;        }&#10;        // Clear all slots&#10;        foreach (var slot in generalSlots) if (slot != null) slot.ClearSlot();&#10;        foreach (var slot in journalSlots) if (slot != null) slot.ClearSlot();&#10;        foreach (var slot in questItemSlots) if (slot != null) slot.ClearSlot();&#10;&#10;        // Helper to get Sprite from ItemSO by itemName&#10;        Sprite GetSprite(string name)&#10;        {&#10;            foreach (var so in itemSOs)&#10;                if (so != null &amp;&amp; so.itemName == name)&#10;                    return so.GetSprite();&#10;            return null;&#10;        }&#10;&#10;        int i = 0;&#10;        foreach (var data in gameData.generalInventory)&#10;        {&#10;            if (i &gt;= generalSlots.Length) break;&#10;            if (generalSlots[i] != null)&#10;                generalSlots[i].AddItem(data.itemName, data.quantity, GetSprite(data.itemName), data.itemDescription);&#10;            i++;&#10;        }&#10;        i = 0;&#10;        foreach (var data in gameData.journalInventory)&#10;        {&#10;            if (i &gt;= journalSlots.Length) break;&#10;            if (journalSlots[i] != null)&#10;                journalSlots[i].AddItem(data.itemName, data.quantity, GetSprite(data.itemName), data.itemDescription);&#10;            i++;&#10;        }&#10;        i = 0;&#10;        foreach (var data in gameData.questInventory)&#10;        {&#10;            if (i &gt;= questItemSlots.Length) break;&#10;            if (questItemSlots[i] != null)&#10;                questItemSlots[i].AddItem(data.itemName, data.quantity, GetSprite(data.itemName), data.itemDescription);&#10;            i++;&#10;        }&#10;    }&#10;&#10;    public void SaveData(GameData gameData)&#10;    {&#10;        if (gameData == null)&#10;        {&#10;            Debug.LogError(&quot;GameData is null in InventoryManager.SaveData&quot;);&#10;            return;&#10;        }&#10;        if (generalSlots == null || journalSlots == null || questItemSlots == null)&#10;        {&#10;            Debug.LogError(&quot;InventoryManager slot arrays are not assigned in the Inspector.&quot;);&#10;            return;&#10;        }&#10;        gameData.generalInventory.Clear();&#10;        gameData.journalInventory.Clear();&#10;        gameData.questInventory.Clear();&#10;        &#10;        foreach (var slot in generalSlots)&#10;        {&#10;            if (slot != null &amp;&amp; !string.IsNullOrEmpty(slot.itemName) &amp;&amp; slot.quantity &gt; 0)&#10;            {&#10;                gameData.generalInventory.Add(new InventoryItemData {&#10;                    itemName = slot.itemName,&#10;                    quantity = slot.quantity,&#10;                    itemDescription = slot.itemDescription,&#10;                    itemType = ItemType.General&#10;                });&#10;            }&#10;        }&#10;        foreach (var slot in journalSlots)&#10;        {&#10;            if (slot != null &amp;&amp; !string.IsNullOrEmpty(slot.itemName) &amp;&amp; slot.quantity &gt; 0)&#10;            {&#10;                gameData.journalInventory.Add(new InventoryItemData {&#10;                    itemName = slot.itemName,&#10;                    quantity = slot.quantity,&#10;                    itemDescription = slot.itemDescription,&#10;                    itemType = ItemType.Journal&#10;                });&#10;            }&#10;        }&#10;        foreach (var slot in questItemSlots)&#10;        {&#10;            if (slot != null &amp;&amp; !string.IsNullOrEmpty(slot.itemName) &amp;&amp; slot.quantity &gt; 0)&#10;            {&#10;                gameData.questInventory.Add(new InventoryItemData {&#10;                    itemName = slot.itemName,&#10;                    quantity = slot.quantity,&#10;                    itemDescription = slot.itemDescription,&#10;                    itemType = ItemType.QuestItem&#10;                });&#10;            }&#10;        }&#10;    }&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/Assets/Scripts/Item/ItemSO.cs">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/Assets/Scripts/Item/ItemSO.cs" />
              <option name="originalContent" value="using System.Collections;&#10;using System.Collections.Generic;&#10;using UnityEngine;&#10;&#10;[CreateAssetMenu]&#10;public class ItemSO : ScriptableObject&#10;{&#10;    public string itemName;&#10;    public StatToChange statToChange = new StatToChange();&#10;    public int amountToChangeStat;&#10;&#10;    public bool UseItem()&#10;    {&#10;        if (statToChange == StatToChange.Health)&#10;        {&#10;            PlayerHealth playerHealth = GameObject.Find(&quot;Player&quot;)?.GetComponent&lt;PlayerHealth&gt;();&#10;&#10;            if (playerHealth.currentHealth == playerHealth.maxHealth)&#10;            {&#10;                Debug.Log(&quot;Player's health is already full.&quot;);&#10;                return false;&#10;            }&#10;            else&#10;            {&#10;                playerHealth.ChangeHealth(amountToChangeStat);&#10;                return true;&#10;            }&#10;        }&#10;&#10;        return false;&#10;    }&#10;&#10;public enum StatToChange&#10;    {&#10;        Health,&#10;        Stamina,&#10;    }&#10;    &#10;    &#10;}&#10;" />
              <option name="updatedContent" value="using System.Collections;&#10;using System.Collections.Generic;&#10;using UnityEngine;&#10;&#10;[CreateAssetMenu]&#10;public class ItemSO : ScriptableObject&#10;{&#10;    public string itemName;&#10;    public StatToChange statToChange = new StatToChange();&#10;    public int amountToChangeStat;&#10;    public Sprite itemIcon;&#10;&#10;    public bool UseItem()&#10;    {&#10;        if (statToChange == StatToChange.Health)&#10;        {&#10;            PlayerHealth playerHealth = GameObject.Find(&quot;Player&quot;)?.GetComponent&lt;PlayerHealth&gt;();&#10;&#10;            if (playerHealth.currentHealth == playerHealth.maxHealth)&#10;            {&#10;                Debug.Log(&quot;Player's health is already full.&quot;);&#10;                return false;&#10;            }&#10;            else&#10;            {&#10;                playerHealth.ChangeHealth(amountToChangeStat);&#10;                return true;&#10;            }&#10;        }&#10;&#10;        return false;&#10;    }&#10;&#10;    public Sprite GetSprite()&#10;    {&#10;        return itemIcon;&#10;    }&#10;&#10;    public enum StatToChange&#10;    {&#10;        Health,&#10;        Stamina,&#10;    }&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/Assets/Scripts/Item/ItemSlot.cs">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/Assets/Scripts/Item/ItemSlot.cs" />
              <option name="originalContent" value="using System;&#10;using UnityEngine;&#10;using TMPro;&#10;using Unity.VisualScripting;&#10;using UnityEngine.EventSystems;&#10;using UnityEngine.UI;&#10;&#10;public class ItemSlot : MonoBehaviour, IPointerClickHandler&#10;{&#10;    public string itemName;&#10;    public int quantity;&#10;    public Sprite itemIcon;&#10;    public bool isFull;&#10;    public string itemDescription;&#10;    public Sprite emptySprite;&#10;&#10;    [SerializeField] private TMP_Text quantityText;&#10;    [SerializeField] private Image itemIconImage;&#10;&#10;    public Image itemDescriptionImage;&#10;    public TMP_Text itemDescriptionNameText;&#10;    public TMP_Text itemDescriptionText;&#10;    &#10;    public GameObject selectedShader;&#10;    public bool isSelected;&#10;    &#10;    private InventoryManager inventoryManager;&#10;&#10;    private void Start()&#10;    {&#10;        inventoryManager = GameObject.Find(&quot;InventoryCanvas&quot;).GetComponent&lt;InventoryManager&gt;();&#10;    }&#10;&#10;    public int AddItem(string itemName, int quantity, Sprite itemIcon, string itemDescription, int maxStack = 99)&#10;    {&#10;        // เงื่อนไข: ช่องว่าง หรือ ช่องเดิมที่ชื่อ item เดียวกัน&#10;        if (string.IsNullOrEmpty(this.itemName) || this.itemName == itemName)&#10;        {&#10;            this.itemName = itemName;&#10;            this.itemIcon = itemIcon;&#10;            this.itemDescription = itemDescription;&#10;&#10;            int total = this.quantity + quantity;&#10;&#10;            if (total &lt;= maxStack)&#10;            {&#10;                this.quantity = total;&#10;                isFull = (this.quantity == maxStack);&#10;                quantityText.text = this.quantity.ToString();&#10;                quantityText.enabled = true;&#10;                itemIconImage.sprite = itemIcon;&#10;                return 0; // ไม่เหลือ&#10;            }&#10;            else&#10;            {&#10;                this.quantity = maxStack;&#10;                isFull = true;&#10;                quantityText.text = this.quantity.ToString();&#10;                quantityText.enabled = true;&#10;                itemIconImage.sprite = itemIcon;&#10;                return total - maxStack; // จำนวนที่ยังเหลือ&#10;            }&#10;        }&#10;&#10;        // ถ้าไม่ใช่ item เดียวกันเลย (ไม่ควรมาเรียก method นี้)&#10;        return quantity;&#10;    }&#10;&#10;    public void OnPointerClick(PointerEventData eventData)&#10;    {&#10;        if (eventData.button == PointerEventData.InputButton.Left)&#10;        {&#10;            OnLeftClick();&#10;        }&#10;        if (eventData.button == PointerEventData.InputButton.Right)&#10;        {&#10;            OnRightClick();&#10;        }&#10;    }&#10;&#10;    public void OnLeftClick()&#10;    {&#10;        if (isSelected)&#10;        {&#10;            bool usable = inventoryManager.UseItem(this.itemName);&#10;            if (usable)&#10;            {&#10;                this.quantity -= 1;&#10;                quantityText.text = this.quantity.ToString();&#10;                if (this.quantity &lt;= 0)&#10;                    EmptySlot();&#10;            }&#10;&#10;        }&#10;&#10;        else&#10;        {&#10;            if (string.IsNullOrEmpty(itemName))&#10;                return; // ป้องกัน ghost slot&#10;            inventoryManager.DeselectAllSlots();&#10;            selectedShader.SetActive(true);&#10;            isSelected = true;&#10;            itemDescriptionNameText.text = itemName;&#10;            itemDescriptionText.text = itemDescription;&#10;            itemDescriptionImage.sprite = itemIcon;&#10;            if (itemDescriptionImage.sprite == null)&#10;            {&#10;                itemDescriptionImage.sprite = emptySprite;&#10;            }&#10;        }&#10;&#10;    }&#10;&#10;    private void EmptySlot()&#10;    {&#10;        quantity = 0;&#10;        itemName = &quot;&quot;;&#10;        itemDescription = &quot;&quot;;&#10;        itemIcon = null;&#10;        isFull = false;&#10;        isSelected = false;&#10;&#10;        quantityText.enabled = false;&#10;        quantityText.text = &quot;&quot;;&#10;        itemIconImage.sprite = emptySprite;&#10;&#10;        itemDescriptionNameText.text = &quot;&quot;;&#10;        itemDescriptionText.text = &quot;&quot;;&#10;        itemDescriptionImage.sprite = emptySprite;&#10;&#10;        selectedShader.SetActive(false);&#10;    }&#10;&#10;    public void OnRightClick()&#10;    {&#10;    }&#10;    &#10;}" />
              <option name="updatedContent" value="using System;&#10;using UnityEngine;&#10;using TMPro;&#10;using Unity.VisualScripting;&#10;using UnityEngine.EventSystems;&#10;using UnityEngine.UI;&#10;&#10;public class ItemSlot : MonoBehaviour, IPointerClickHandler&#10;{&#10;    public string itemName;&#10;    public int quantity;&#10;    public Sprite itemIcon;&#10;    public bool isFull;&#10;    public string itemDescription;&#10;    public Sprite emptySprite;&#10;&#10;    [SerializeField] private TMP_Text quantityText;&#10;    [SerializeField] private Image itemIconImage;&#10;&#10;    public Image itemDescriptionImage;&#10;    public TMP_Text itemDescriptionNameText;&#10;    public TMP_Text itemDescriptionText;&#10;    &#10;    public GameObject selectedShader;&#10;    public bool isSelected;&#10;    &#10;    private InventoryManager inventoryManager;&#10;&#10;    private void Start()&#10;    {&#10;        inventoryManager = GameObject.Find(&quot;InventoryCanvas&quot;).GetComponent&lt;InventoryManager&gt;();&#10;    }&#10;&#10;    public int AddItem(string itemName, int quantity, Sprite itemIcon, string itemDescription, int maxStack = 99)&#10;    {&#10;        // เงื่อนไข: ช่องว่าง หรือ ช่องเดิมที่ชื่อ item เดียวกัน&#10;        if (string.IsNullOrEmpty(this.itemName) || this.itemName == itemName)&#10;        {&#10;            this.itemName = itemName;&#10;            this.itemIcon = itemIcon;&#10;            this.itemDescription = itemDescription;&#10;&#10;            int total = this.quantity + quantity;&#10;&#10;            if (total &lt;= maxStack)&#10;            {&#10;                this.quantity = total;&#10;                isFull = (this.quantity == maxStack);&#10;                quantityText.text = this.quantity.ToString();&#10;                quantityText.enabled = true;&#10;                itemIconImage.sprite = itemIcon;&#10;                return 0; // ไม่เหลือ&#10;            }&#10;            else&#10;            {&#10;                this.quantity = maxStack;&#10;                isFull = true;&#10;                quantityText.text = this.quantity.ToString();&#10;                quantityText.enabled = true;&#10;                itemIconImage.sprite = itemIcon;&#10;                return total - maxStack; // จำนวนที่ยังเหลือ&#10;            }&#10;        }&#10;&#10;        // ถ้าไม่ใช่ item เดียวกันเลย (ไม่ควรมาเรียก method นี้)&#10;        return quantity;&#10;    }&#10;&#10;    public void OnPointerClick(PointerEventData eventData)&#10;    {&#10;        if (eventData.button == PointerEventData.InputButton.Left)&#10;        {&#10;            OnLeftClick();&#10;        }&#10;        if (eventData.button == PointerEventData.InputButton.Right)&#10;        {&#10;            OnRightClick();&#10;        }&#10;    }&#10;&#10;    public void OnLeftClick()&#10;    {&#10;        if (isSelected)&#10;        {&#10;            bool usable = inventoryManager.UseItem(this.itemName);&#10;            if (usable)&#10;            {&#10;                this.quantity -= 1;&#10;                quantityText.text = this.quantity.ToString();&#10;                if (this.quantity &lt;= 0)&#10;                    EmptySlot();&#10;            }&#10;&#10;        }&#10;&#10;        else&#10;        {&#10;            if (string.IsNullOrEmpty(itemName))&#10;                return; // ป้องกัน ghost slot&#10;            inventoryManager.DeselectAllSlots();&#10;            selectedShader.SetActive(true);&#10;            isSelected = true;&#10;            itemDescriptionNameText.text = itemName;&#10;            itemDescriptionText.text = itemDescription;&#10;            itemDescriptionImage.sprite = itemIcon;&#10;            if (itemDescriptionImage.sprite == null)&#10;            {&#10;                itemDescriptionImage.sprite = emptySprite;&#10;            }&#10;        }&#10;&#10;    }&#10;&#10;    private void EmptySlot()&#10;    {&#10;        quantity = 0;&#10;        itemName = &quot;&quot;;&#10;        itemDescription = &quot;&quot;;&#10;        itemIcon = null;&#10;        isFull = false;&#10;        isSelected = false;&#10;&#10;        quantityText.enabled = false;&#10;        quantityText.text = &quot;&quot;;&#10;        itemIconImage.sprite = emptySprite;&#10;&#10;        itemDescriptionNameText.text = &quot;&quot;;&#10;        itemDescriptionText.text = &quot;&quot;;&#10;        itemDescriptionImage.sprite = emptySprite;&#10;&#10;        selectedShader.SetActive(false);&#10;    }&#10;&#10;    public void OnRightClick()&#10;    {&#10;    }&#10;&#10;    public void ClearSlot()&#10;    {&#10;        quantity = 0;&#10;        itemName = &quot;&quot;;&#10;        itemDescription = &quot;&quot;;&#10;        itemIcon = null;&#10;        isFull = false;&#10;        isSelected = false;&#10;        quantityText.enabled = false;&#10;        quantityText.text = &quot;&quot;;&#10;        itemIconImage.sprite = emptySprite;&#10;        if (itemDescriptionNameText != null) itemDescriptionNameText.text = &quot;&quot;;&#10;        if (itemDescriptionText != null) itemDescriptionText.text = &quot;&quot;;&#10;        if (itemDescriptionImage != null) itemDescriptionImage.sprite = emptySprite;&#10;        if (selectedShader != null) selectedShader.SetActive(false);&#10;    }&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
      </map>
    </option>
  </component>
</project>