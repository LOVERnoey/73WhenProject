<?xml version="1.0" encoding="UTF-8"?>
<project version="4">
  <component name="CopilotDiffPersistence">
    <option name="pendingDiffs">
      <map>
        <entry key="$PROJECT_DIR$/Assets/Scripts/CoreLoop/ChecklistManager.cs">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/Assets/Scripts/CoreLoop/ChecklistManager.cs" />
              <option name="originalContent" value="using UnityEngine;&#10;using System.Collections.Generic;&#10;&#10;namespace CoreLoop&#10;{&#10;    public class ChecklistManager : MonoBehaviour&#10;    {&#10;        // Handles daily checklist UI and randomization&#10;&#10;        // Checklist data for the day&#10;        [Header(&quot;Daily Checklist Data&quot;)]&#10;        public List&lt;string&gt; workersToCheck = new List&lt;string&gt;();&#10;        public List&lt;string&gt; equipmentToCheck = new List&lt;string&gt;();&#10;        public List&lt;string&gt; constructionSitesToCheck = new List&lt;string&gt;();&#10;        public List&lt;string&gt; obstacles = new List&lt;string&gt;();&#10;        public int workersRequired;&#10;        public int equipmentRequired;&#10;        public int constructionRequired;&#10;&#10;        // Example: possible names/items (should be loaded from data in real use)&#10;        [Header(&quot;Possible Names and Items&quot;)]&#10;        [SerializeField] private List&lt;string&gt; allWorkerNames = new List&lt;string&gt; { &quot;Somchai&quot;, &quot;Nattapong&quot;, &quot;Suda&quot;, &quot;Kanya&quot;, &quot;Prasit&quot;, &quot;Wirote&quot;, &quot;Malee&quot; };&#10;        [SerializeField] private List&lt;string&gt; allEquipment = new List&lt;string&gt; { &quot;Hammer&quot;, &quot;Drill&quot;, &quot;Saw&quot;, &quot;Helmet&quot;, &quot;Gloves&quot;, &quot;Ladder&quot; };&#10;        [SerializeField] private List&lt;string&gt; allConstructionSites = new List&lt;string&gt; { &quot;BuildingA&quot;, &quot;BuildingB&quot;, &quot;BuildingC&quot; };&#10;        [SerializeField] private List&lt;string&gt; allObstacles = new List&lt;string&gt; { &quot;Rain&quot;, &quot;PowerOutage&quot;, &quot;LateDelivery&quot;, &quot;BrokenTool&quot; };&#10;&#10;        // References to managers (assign in inspector or via script)&#10;        public WorkerManager workerManager;&#10;        public EquipmentManager equipmentManager;&#10;        public ConstructionQualityManager constructionQualityManager;&#10;        public int currentDay = 1;&#10;&#10;        public void GenerateChecklist(int day)&#10;        {&#10;            // Increase difficulty by day&#10;            workersRequired = Mathf.Min(2 + day, allWorkerNames.Count);&#10;            equipmentRequired = Mathf.Min(2 + day, allEquipment.Count);&#10;            constructionRequired = Mathf.Min(1 + day / 3, allConstructionSites.Count);&#10;&#10;            workersToCheck = GetRandomList(allWorkerNames, workersRequired);&#10;            equipmentToCheck = GetRandomList(allEquipment, equipmentRequired);&#10;            constructionSitesToCheck = GetRandomList(allConstructionSites, constructionRequired);&#10;            obstacles = GetRandomList(allObstacles, Mathf.Min(1 + day / 2, allObstacles.Count));&#10;        }&#10;&#10;        private List&lt;string&gt; GetRandomList(List&lt;string&gt; source, int count)&#10;        {&#10;            List&lt;string&gt; copy = new List&lt;string&gt;(source);&#10;            List&lt;string&gt; result = new List&lt;string&gt;();&#10;            for (int i = 0; i &lt; count &amp;&amp; copy.Count &gt; 0; i++)&#10;            {&#10;                int idx = Random.Range(0, copy.Count);&#10;                result.Add(copy[idx]);&#10;                copy.RemoveAt(idx);&#10;            }&#10;            return result;&#10;        }&#10;&#10;        public void ShowChecklistPanel()&#10;        {&#10;            // TODO: Implement UI logic to show checklist panel and allow player to check items&#10;            Debug.Log(&quot;Checklist Panel Opened&quot;);&#10;        }&#10;&#10;        // Call this to start a new day&#10;        public void StartDay()&#10;        {&#10;            GenerateChecklist(currentDay);&#10;            workerManager.SpawnWorkers(workersToCheck);&#10;            equipmentManager.SpawnEquipment(equipmentToCheck);&#10;            constructionQualityManager.SpawnConstructionSites(constructionSitesToCheck);&#10;            ShowChecklistPanel();&#10;        }&#10;&#10;        // Call this to submit checklist and save results&#10;        public void SubmitChecklist()&#10;        {&#10;            int workersChecked = workerManager.CheckWorkerAttendance(workersToCheck);&#10;            int equipmentChecked = equipmentManager.CheckEquipment(equipmentToCheck);&#10;            int constructionScore = constructionQualityManager.CheckConstructionQuality(constructionSitesToCheck);&#10;            // For demo, assume all obstacles missed&#10;            List&lt;string&gt; missedObstacles = new List&lt;string&gt;(obstacles);&#10;&#10;            var result = new DailyChecklistResult(currentDay)&#10;            {&#10;                workersChecked = workersChecked,&#10;                workersTotal = workersToCheck.Count,&#10;                equipmentChecked = equipmentChecked,&#10;                equipmentTotal = equipmentToCheck.Count,&#10;                constructionQualityScore = constructionScore,&#10;                missedObstacles = missedObstacles&#10;            };&#10;            // Save to GameData (pseudo, replace with your save system)&#10;            // GameData.Instance.dailyChecklistResults.Add(result);&#10;            Debug.Log($&quot;Day {currentDay} Results: Workers {workersChecked}/{workersToCheck.Count}, Equipment {equipmentChecked}/{equipmentToCheck.Count}, Quality {constructionScore}&quot;);&#10;            currentDay++;&#10;        }&#10;    }&#10;}&#10;" />
              <option name="updatedContent" value="using UnityEngine;&#10;using System.Collections.Generic;&#10;&#10;namespace CoreLoop&#10;{&#10;    public class ChecklistManager : MonoBehaviour&#10;    {&#10;        // Handles daily checklist UI and randomization&#10;&#10;        // Checklist data for the day&#10;        [Header(&quot;Daily Checklist Data&quot;)]&#10;        [HideInInspector] private List&lt;string&gt; workersToCheck = new List&lt;string&gt;();&#10;        [HideInInspector] private List&lt;string&gt; equipmentToCheck = new List&lt;string&gt;();&#10;        [HideInInspector] private List&lt;string&gt; constructionSitesToCheck = new List&lt;string&gt;();&#10;        [HideInInspector] private List&lt;string&gt; obstacles = new List&lt;string&gt;();&#10;        public int workersRequired;&#10;        public int equipmentRequired;&#10;        public int constructionRequired;&#10;&#10;        // Example: possible names/items (should be loaded from data in real use)&#10;        [Header(&quot;Possible Names and Items&quot;)]&#10;        [SerializeField] private List&lt;string&gt; allWorkerNames = new List&lt;string&gt; { &quot;Somchai&quot;, &quot;Nattapong&quot;, &quot;Suda&quot;, &quot;Kanya&quot;, &quot;Prasit&quot;, &quot;Wirote&quot;, &quot;Malee&quot; };&#10;        [SerializeField] private List&lt;string&gt; allEquipment = new List&lt;string&gt; { &quot;Hammer&quot;, &quot;Drill&quot;, &quot;Saw&quot;, &quot;Helmet&quot;, &quot;Gloves&quot;, &quot;Ladder&quot; };&#10;        [SerializeField] private List&lt;string&gt; allConstructionSites = new List&lt;string&gt; { &quot;BuildingA&quot;, &quot;BuildingB&quot;, &quot;BuildingC&quot; };&#10;        [SerializeField] private List&lt;string&gt; allObstacles = new List&lt;string&gt; { &quot;Rain&quot;, &quot;PowerOutage&quot;, &quot;LateDelivery&quot;, &quot;BrokenTool&quot; };&#10;&#10;        // References to managers (assign in inspector or via script)&#10;        public WorkerManager workerManager;&#10;        public EquipmentManager equipmentManager;&#10;        public ConstructionQualityManager constructionQualityManager;&#10;        public int currentDay = 1;&#10;&#10;        public void GenerateChecklist(int day)&#10;        {&#10;            // Increase difficulty by day&#10;            workersRequired = Mathf.Min(2 + day, allWorkerNames.Count);&#10;            equipmentRequired = Mathf.Min(2 + day, allEquipment.Count);&#10;            constructionRequired = Mathf.Min(1 + day / 3, allConstructionSites.Count);&#10;&#10;            workersToCheck = GetRandomList(allWorkerNames, workersRequired);&#10;            equipmentToCheck = GetRandomList(allEquipment, equipmentRequired);&#10;            constructionSitesToCheck = GetRandomList(allConstructionSites, constructionRequired);&#10;            obstacles = GetRandomList(allObstacles, Mathf.Min(1 + day / 2, allObstacles.Count));&#10;        }&#10;&#10;        private List&lt;string&gt; GetRandomList(List&lt;string&gt; source, int count)&#10;        {&#10;            List&lt;string&gt; copy = new List&lt;string&gt;(source);&#10;            List&lt;string&gt; result = new List&lt;string&gt;();&#10;            for (int i = 0; i &lt; count &amp;&amp; copy.Count &gt; 0; i++)&#10;            {&#10;                int idx = Random.Range(0, copy.Count);&#10;                result.Add(copy[idx]);&#10;                copy.RemoveAt(idx);&#10;            }&#10;            return result;&#10;        }&#10;&#10;        public void ShowChecklistPanel()&#10;        {&#10;            // TODO: Implement UI logic to show checklist panel and allow player to check items&#10;            Debug.Log(&quot;Checklist Panel Opened&quot;);&#10;        }&#10;&#10;        // Call this to start a new day&#10;        public void StartDay()&#10;        {&#10;            GenerateChecklist(currentDay);&#10;            workerManager.SpawnWorkers(workersToCheck);&#10;            equipmentManager.SpawnEquipment(equipmentToCheck);&#10;            constructionQualityManager.SpawnConstructionSites(constructionSitesToCheck);&#10;            ShowChecklistPanel();&#10;        }&#10;&#10;        // Call this to submit checklist and save results&#10;        public void SubmitChecklist()&#10;        {&#10;            int workersChecked = workerManager.CheckWorkerAttendance(workersToCheck);&#10;            int equipmentChecked = equipmentManager.CheckEquipment(equipmentToCheck);&#10;            int constructionScore = constructionQualityManager.CheckConstructionQuality(constructionSitesToCheck);&#10;            // For demo, assume all obstacles missed&#10;            List&lt;string&gt; missedObstacles = new List&lt;string&gt;(obstacles);&#10;&#10;            var result = new DailyChecklistResult(currentDay)&#10;            {&#10;                workersChecked = workersChecked,&#10;                workersTotal = workersToCheck.Count,&#10;                equipmentChecked = equipmentChecked,&#10;                equipmentTotal = equipmentToCheck.Count,&#10;                constructionQualityScore = constructionScore,&#10;                missedObstacles = missedObstacles&#10;            };&#10;            // Save to GameData (pseudo, replace with your save system)&#10;            // GameData.Instance.dailyChecklistResults.Add(result);&#10;            Debug.Log($&quot;Day {currentDay} Results: Workers {workersChecked}/{workersToCheck.Count}, Equipment {equipmentChecked}/{equipmentToCheck.Count}, Quality {constructionScore}&quot;);&#10;            currentDay++;&#10;        }&#10;    }&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/Assets/Scripts/CoreLoop/ChecklistUIManager.cs">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/Assets/Scripts/CoreLoop/ChecklistUIManager.cs" />
              <option name="originalContent" value="using UnityEngine;&#10;using UnityEngine.UI;&#10;using System.Collections.Generic;&#10;&#10;namespace CoreLoop&#10;{&#10;    public class ChecklistUIManager : MonoBehaviour&#10;    {&#10;        [Header(&quot;Checklist UI Elements&quot;)]&#10;        public GameObject checklistItemPrefab; // Prefab with Toggle and Text&#10;        public Transform checklistContent; // Parent for checklist items&#10;        public Button submitButton;&#10;        public Text checklistTitle;&#10;&#10;        private List&lt;Toggle&gt; itemToggles = new List&lt;Toggle&gt;();&#10;        private List&lt;string&gt; currentItems = new List&lt;string&gt;();&#10;        private System.Action&lt;List&lt;string&gt;&gt; onSubmitCallback;&#10;&#10;        public void ShowChecklist(string title, List&lt;string&gt; items, System.Action&lt;List&lt;string&gt;&gt; onSubmit)&#10;        {&#10;            checklistTitle.text = title;&#10;            // Clear previous&#10;            foreach (Transform child in checklistContent)&#10;                Destroy(child.gameObject);&#10;            itemToggles.Clear();&#10;            currentItems = new List&lt;string&gt;(items);&#10;            onSubmitCallback = onSubmit;&#10;&#10;            // Create new items&#10;            foreach (var item in items)&#10;            {&#10;                var go = Instantiate(checklistItemPrefab, checklistContent);&#10;                var toggle = go.GetComponentInChildren&lt;Toggle&gt;();&#10;                var label = go.GetComponentInChildren&lt;Text&gt;();&#10;                label.text = item;&#10;                itemToggles.Add(toggle);&#10;            }&#10;            submitButton.onClick.RemoveAllListeners();&#10;            submitButton.onClick.AddListener(OnSubmit);&#10;            gameObject.SetActive(true);&#10;        }&#10;&#10;        public List&lt;string&gt; GetCheckedItems()&#10;        {&#10;            var checkedItems = new List&lt;string&gt;();&#10;            for (int i = 0; i &lt; itemToggles.Count; i++)&#10;            {&#10;                if (itemToggles[i].isOn)&#10;                    checkedItems.Add(currentItems[i]);&#10;            }&#10;            return checkedItems;&#10;        }&#10;&#10;        public void OnSubmit()&#10;        {&#10;            var checkedItems = GetCheckedItems();&#10;            gameObject.SetActive(false);&#10;            onSubmitCallback?.Invoke(checkedItems);&#10;        }&#10;    }&#10;}&#10;&#10;" />
              <option name="updatedContent" value="using UnityEngine;&#10;using UnityEngine.UI;&#10;using System.Collections.Generic;&#10;&#10;namespace CoreLoop&#10;{&#10;    public class ChecklistUIManager : MonoBehaviour&#10;    {&#10;        [Header(&quot;Checklist UI Elements&quot;)]&#10;        public GameObject checklistItemPrefab; // Prefab with Toggle and Text&#10;        public Transform checklistContent; // Parent for checklist items&#10;        public Button submitButton;&#10;        public TMPro.TMP_Text checklistTitle;&#10;&#10;        private List&lt;Toggle&gt; itemToggles = new List&lt;Toggle&gt;();&#10;        private List&lt;string&gt; currentItems = new List&lt;string&gt;();&#10;        private System.Action&lt;List&lt;string&gt;&gt; onSubmitCallback;&#10;&#10;        public void ShowChecklist(string title, List&lt;string&gt; items, System.Action&lt;List&lt;string&gt;&gt; onSubmit)&#10;        {&#10;            checklistTitle.text = title;&#10;            // Clear previous&#10;            foreach (Transform child in checklistContent)&#10;                Destroy(child.gameObject);&#10;            itemToggles.Clear();&#10;            currentItems = new List&lt;string&gt;(items);&#10;            onSubmitCallback = onSubmit;&#10;&#10;            // Create new items&#10;            foreach (var item in items)&#10;            {&#10;                var go = Instantiate(checklistItemPrefab, checklistContent);&#10;                var toggle = go.GetComponentInChildren&lt;Toggle&gt;();&#10;                var label = go.GetComponentInChildren&lt;Text&gt;();&#10;                label.text = item;&#10;                itemToggles.Add(toggle);&#10;            }&#10;            submitButton.onClick.RemoveAllListeners();&#10;            submitButton.onClick.AddListener(OnSubmit);&#10;            gameObject.SetActive(true);&#10;        }&#10;&#10;        public List&lt;string&gt; GetCheckedItems()&#10;        {&#10;            var checkedItems = new List&lt;string&gt;();&#10;            for (int i = 0; i &lt; itemToggles.Count; i++)&#10;            {&#10;                if (itemToggles[i].isOn)&#10;                    checkedItems.Add(currentItems[i]);&#10;            }&#10;            return checkedItems;&#10;        }&#10;&#10;        public void OnSubmit()&#10;        {&#10;            var checkedItems = GetCheckedItems();&#10;            gameObject.SetActive(false);&#10;            onSubmitCallback?.Invoke(checkedItems);&#10;        }&#10;    }&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/Assets/Scripts/CoreLoop/ConstructionQualityManager.cs">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/Assets/Scripts/CoreLoop/ConstructionQualityManager.cs" />
              <option name="originalContent" value="using UnityEngine;&#10;&#10;namespace CoreLoop&#10;{&#10;    public class ConstructionQualityManager : MonoBehaviour&#10;    {&#10;        // Handles checking construction quality&#10;        public void InspectConstruction() { /* TODO: Implement inspection logic */ }&#10;    }&#10;}&#10;" />
              <option name="updatedContent" value="using System.Collections.Generic;&#10;using UnityEngine;&#10;&#10;namespace CoreLoop&#10;{&#10;    public class ConstructionQualityManager : MonoBehaviour&#10;    {&#10;        public GameObject constructionPrefab; // Assign construction site prefab in inspector&#10;        private List&lt;GameObject&gt; spawnedSites = new List&lt;GameObject&gt;();&#10;        private Dictionary&lt;string, int&gt; siteQuality = new Dictionary&lt;string, int&gt;();&#10;&#10;        // Handles checking construction quality&#10;        public void InspectConstruction() { /* TODO: Implement inspection logic */ }&#10;&#10;        public void SpawnConstructionSites(List&lt;string&gt; siteList)&#10;        {&#10;            // Clear previous sites&#10;            foreach (var site in spawnedSites)&#10;            {&#10;                Destroy(site);&#10;            }&#10;            spawnedSites.Clear();&#10;            siteQuality.Clear();&#10;&#10;            // Spawn new sites&#10;            foreach (var name in siteList)&#10;            {&#10;                Vector3 spawnPos = new Vector3(Random.Range(-10, -5), 0, Random.Range(-5, 5));&#10;                GameObject site = Instantiate(constructionPrefab, spawnPos, Quaternion.identity);&#10;                site.name = name;&#10;                spawnedSites.Add(site);&#10;                // Random quality score for demo (0-100)&#10;                siteQuality[name] = Random.Range(60, 100);&#10;            }&#10;        }&#10;&#10;        public int CheckConstructionQuality(List&lt;string&gt; checklist)&#10;        {&#10;            int totalScore = 0;&#10;            foreach (var name in checklist)&#10;            {&#10;                if (siteQuality.ContainsKey(name))&#10;                    totalScore += siteQuality[name];&#10;            }&#10;            return checklist.Count &gt; 0 ? totalScore / checklist.Count : 0;&#10;        }&#10;    }&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/Assets/Scripts/CoreLoop/CoreLoopManager.cs">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/Assets/Scripts/CoreLoop/CoreLoopManager.cs" />
              <option name="originalContent" value="using System.Collections;&#10;using System.Collections.Generic;&#10;using UnityEngine;&#10;&#10;public class CoreLoopManager : MonoBehaviour&#10;{&#10;    // Start is called before the first frame update&#10;    void Start()&#10;    {&#10;        &#10;    }&#10;&#10;    // Update is called once per frame&#10;    void Update()&#10;    {&#10;        &#10;    }&#10;}&#10;" />
              <option name="updatedContent" value="using System.Collections;&#10;using System.Collections.Generic;&#10;using UnityEngine;&#10;using System;&#10;&#10;public class CoreLoopManager : MonoBehaviour&#10;{&#10;    public int currentDay = 1;&#10;    public int maxDays = 11;&#10;    public DailyChecklist currentChecklist;&#10;&#10;    public event Action&lt;int&gt; OnDayChanged;&#10;    public event Action&lt;DailyChecklist&gt; OnChecklistGenerated;&#10;&#10;    // Start is called before the first frame update&#10;    void Start()&#10;    {&#10;        StartNewDay();&#10;    }&#10;&#10;    public void StartNewDay()&#10;    {&#10;        // Increase difficulty by day&#10;        currentChecklist = GenerateChecklistForDay(currentDay);&#10;        OnChecklistGenerated?.Invoke(currentChecklist);&#10;        OnDayChanged?.Invoke(currentDay);&#10;    }&#10;&#10;    public void SubmitInspection()&#10;    {&#10;        // Save results to GameData (pseudo-code)&#10;        // DataPersistenceManager.Instance.SaveChecklistResult(currentDay, currentChecklist);&#10;        currentDay++;&#10;        if (currentDay &gt; maxDays)&#10;        {&#10;            EndGame();&#10;        }&#10;        else&#10;        {&#10;            StartNewDay();&#10;        }&#10;    }&#10;&#10;    DailyChecklist GenerateChecklistForDay(int day)&#10;    {&#10;        var checklist = new DailyChecklist();&#10;        checklist.dayNumber = day;&#10;        // Example: Increase number of items each day&#10;        int workersToCheck = Mathf.Min(3 + day, 10);&#10;        int equipmentToCheck = Mathf.Min(2 + day, 8);&#10;        int constructionsToCheck = Mathf.Min(1 + day / 2, 5);&#10;        // Generate workers&#10;        for (int i = 0; i &lt; workersToCheck; i++)&#10;        {&#10;            checklist.items.Add(new ChecklistItem {&#10;                name = &quot;Worker &quot; + (i+1),&#10;                type = ChecklistType.Worker,&#10;                isRequired = true&#10;            });&#10;        }&#10;        // Generate equipment&#10;        for (int i = 0; i &lt; equipmentToCheck; i++)&#10;        {&#10;            checklist.items.Add(new ChecklistItem {&#10;                name = &quot;Equipment &quot; + (i+1),&#10;                type = ChecklistType.Equipment,&#10;                isRequired = true,&#10;                requiredQuantity = UnityEngine.Random.Range(1, 4)&#10;            });&#10;        }&#10;        // Generate constructions&#10;        for (int i = 0; i &lt; constructionsToCheck; i++)&#10;        {&#10;            checklist.items.Add(new ChecklistItem {&#10;                name = &quot;Construction &quot; + (i+1),&#10;                type = ChecklistType.Construction,&#10;                isRequired = true&#10;            });&#10;        }&#10;        return checklist;&#10;    }&#10;&#10;    void EndGame()&#10;    {&#10;        Debug.Log(&quot;Game Over. Show ending based on results.&quot;);&#10;        // TODO: Calculate ending based on all days' results&#10;    }&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/Assets/Scripts/CoreLoop/DailyChecklist.cs">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/Assets/Scripts/CoreLoop/DailyChecklist.cs" />
              <option name="updatedContent" value="using System.Collections.Generic;&#10;&#10;[System.Serializable]&#10;public class DailyChecklist&#10;{&#10;    public int dayNumber;&#10;    public List&lt;ChecklistItem&gt; items = new List&lt;ChecklistItem&gt;();&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/Assets/Scripts/CoreLoop/EquipmentManager.cs">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/Assets/Scripts/CoreLoop/EquipmentManager.cs" />
              <option name="originalContent" value="using UnityEngine;&#10;using System.Collections.Generic;&#10;&#10;namespace CoreLoop&#10;{&#10;    public class EquipmentManager : MonoBehaviour&#10;    {&#10;        // Handles spawning and checking equipment&#10;        public void SpawnEquipment(List&lt;string&gt; equipmentList) { /* TODO: Spawn equipment objects */ }&#10;        public void CheckEquipment() { /* TODO: Check if all equipment is present */ }&#10;    }&#10;}&#10;" />
              <option name="updatedContent" value="using UnityEngine;&#10;using System.Collections.Generic;&#10;&#10;namespace CoreLoop&#10;{&#10;    public class EquipmentManager : MonoBehaviour&#10;    {&#10;        // Handles spawning and checking equipment&#10;        public GameObject equipmentPrefab; // Assign equipment prefab in inspector&#10;        private List&lt;GameObject&gt; spawnedEquipment = new List&lt;GameObject&gt;();&#10;&#10;        public void SpawnEquipment(List&lt;string&gt; equipmentList)&#10;        {&#10;            // Clear previous equipment&#10;            foreach (var eq in spawnedEquipment)&#10;            {&#10;                Destroy(eq);&#10;            }&#10;            spawnedEquipment.Clear();&#10;&#10;            // Spawn new equipment&#10;            foreach (var name in equipmentList)&#10;            {&#10;                Vector3 spawnPos = new Vector3(Random.Range(5, 15), 0, Random.Range(-5, 5));&#10;                GameObject eq = Instantiate(equipmentPrefab, spawnPos, Quaternion.identity);&#10;                eq.name = name;&#10;                // Optionally set equipment display name here&#10;                spawnedEquipment.Add(eq);&#10;            }&#10;        }&#10;&#10;        public int CheckEquipment(List&lt;string&gt; checklist)&#10;        {&#10;            int present = 0;&#10;            foreach (var name in checklist)&#10;            {&#10;                if (spawnedEquipment.Exists(e =&gt; e.name == name))&#10;                    present++;&#10;            }&#10;            return present;&#10;        }&#10;    }&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/Assets/Scripts/CoreLoop/WorkerManager.cs">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/Assets/Scripts/CoreLoop/WorkerManager.cs" />
              <option name="originalContent" value="using UnityEngine;&#10;using System.Collections.Generic;&#10;&#10;namespace CoreLoop&#10;{&#10;    public class WorkerManager : MonoBehaviour&#10;    {&#10;        // Handles spawning and checking workers&#10;        public GameObject workerPrefab; // Assign NPC prefab in inspector&#10;        private Dictionary&lt;string, GameObject&gt; spawnedWorkers = new Dictionary&lt;string, GameObject&gt;();&#10;&#10;        public void SpawnWorkers(List&lt;string&gt; namesToSpawn)&#10;        {&#10;            // Clear previous workers&#10;            foreach (var worker in spawnedWorkers.Values)&#10;            {&#10;                Destroy(worker);&#10;            }&#10;            spawnedWorkers.Clear();&#10;&#10;            // Spawn new workers&#10;            foreach (var name in namesToSpawn)&#10;            {&#10;                Vector3 spawnPos = new Vector3(Random.Range(-5, 5), 0, Random.Range(-5, 5));&#10;                GameObject worker = Instantiate(workerPrefab, spawnPos, Quaternion.identity);&#10;                worker.name = name;&#10;                // Optionally set NPC display name here&#10;                spawnedWorkers.Add(name, worker);&#10;            }&#10;        }&#10;&#10;        public int CheckWorkerAttendance(List&lt;string&gt; checklist)&#10;        {&#10;            int present = 0;&#10;            foreach (var name in checklist)&#10;            {&#10;                if (spawnedWorkers.ContainsKey(name))&#10;                    present++;&#10;            }&#10;            return present;&#10;        }&#10;    }&#10;}&#10;" />
              <option name="updatedContent" value="using UnityEngine;&#10;using System.Collections.Generic;&#10;&#10;namespace CoreLoop&#10;{&#10;    public class WorkerManager : MonoBehaviour&#10;    {&#10;        // Handles spawning and checking workers&#10;        [System.Serializable]&#10;        public class WorkerPrefabEntry&#10;        {&#10;            public string workerName;&#10;            public GameObject prefab;&#10;        }&#10;        public List&lt;WorkerPrefabEntry&gt; workerPrefabs; // Assign in inspector&#10;        private Dictionary&lt;string, GameObject&gt; spawnedWorkers = new Dictionary&lt;string, GameObject&gt;();&#10;&#10;        private GameObject GetPrefabForWorker(string workerName)&#10;        {&#10;            foreach (var entry in workerPrefabs)&#10;            {&#10;                if (entry.workerName == workerName)&#10;                    return entry.prefab;&#10;            }&#10;            return null;&#10;        }&#10;&#10;        public void SpawnWorkers(List&lt;string&gt; namesToSpawn)&#10;        {&#10;            // Clear previous workers&#10;            foreach (var worker in spawnedWorkers.Values)&#10;            {&#10;                Destroy(worker);&#10;            }&#10;            spawnedWorkers.Clear();&#10;&#10;            // Spawn new workers&#10;            foreach (var workerName in namesToSpawn)&#10;            {&#10;                Vector3 spawnPos = new Vector3(Random.Range(-5, 5), 0, Random.Range(-5, 5));&#10;                GameObject prefab = GetPrefabForWorker(workerName);&#10;                if (prefab != null)&#10;                {&#10;                    GameObject worker = Instantiate(prefab, spawnPos, Quaternion.identity);&#10;                    worker.name = workerName;&#10;                    // Optionally set NPC display name here&#10;                    spawnedWorkers.Add(workerName, worker);&#10;                }&#10;                else&#10;                {&#10;                    Debug.LogWarning($&quot;No prefab found for worker: {workerName}&quot;);&#10;                }&#10;            }&#10;        }&#10;&#10;        public int CheckWorkerAttendance(List&lt;string&gt; checklist)&#10;        {&#10;            int present = 0;&#10;            foreach (var name in checklist)&#10;            {&#10;                if (spawnedWorkers.ContainsKey(name))&#10;                    present++;&#10;            }&#10;            return present;&#10;        }&#10;    }&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/Assets/Scripts/DataPersistence/GameData.cs">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/Assets/Scripts/DataPersistence/GameData.cs" />
              <option name="originalContent" value="using System.Collections;&#10;using System.Collections.Generic;&#10;using UnityEngine;&#10;&#10;[System.Serializable]&#10;public class GameData&#10;{&#10;    public long lastUpdateted;&#10;    &#10;    public int countTest;&#10;    &#10;    public Vector3  playerPosition;&#10;    &#10;    public SerializableDictionary&lt;string, bool&gt;  itemsCollected;&#10;&#10;    public List&lt;InventoryItemData&gt; generalInventory;&#10;    public List&lt;InventoryItemData&gt; journalInventory;&#10;    public List&lt;InventoryItemData&gt; questInventory;&#10;&#10;    &#10;    public GameData()&#10;    {&#10;        this.countTest = 0;&#10;        playerPosition = new Vector3(0, 0.5f, 0);&#10;        itemsCollected = new SerializableDictionary&lt;string, bool&gt;();    &#10;        generalInventory = new List&lt;InventoryItemData&gt;();&#10;        journalInventory = new List&lt;InventoryItemData&gt;();&#10;        questInventory = new List&lt;InventoryItemData&gt;();&#10;    }&#10;    &#10;    public float GetPercentageComplete()&#10;    {&#10;        int maxCount = 100;&#10;        &#10;        float percentage = (float)countTest / maxCount * 100f;&#10;&#10;        return percentage;&#10;    }&#10;}&#10;" />
              <option name="updatedContent" value="using System.Collections;&#10;using System.Collections.Generic;&#10;using UnityEngine;&#10;&#10;[System.Serializable]&#10;public class GameData&#10;{&#10;    public long lastUpdateted;&#10;    &#10;    public int countTest;&#10;    &#10;    public Vector3  playerPosition;&#10;    &#10;    public SerializableDictionary&lt;string, bool&gt;  itemsCollected;&#10;&#10;    public List&lt;InventoryItemData&gt; generalInventory;&#10;    public List&lt;InventoryItemData&gt; journalInventory;&#10;    public List&lt;InventoryItemData&gt; questInventory;&#10;&#10;    // Add daily checklist results for 11 days&#10;    public List&lt;DailyChecklistResult&gt; dailyChecklistResults;&#10;&#10;    &#10;    public GameData()&#10;    {&#10;        this.countTest = 0;&#10;        playerPosition = new Vector3(0, 0.5f, 0);&#10;        itemsCollected = new SerializableDictionary&lt;string, bool&gt;();    &#10;        generalInventory = new List&lt;InventoryItemData&gt;();&#10;        journalInventory = new List&lt;InventoryItemData&gt;();&#10;        questInventory = new List&lt;InventoryItemData&gt;();&#10;        dailyChecklistResults = new List&lt;DailyChecklistResult&gt;();&#10;    }&#10;    &#10;    public float GetPercentageComplete()&#10;    {&#10;        int maxCount = 100;&#10;        &#10;        float percentage = (float)countTest / maxCount * 100f;&#10;&#10;        return percentage;&#10;    }&#10;}&#10;&#10;[System.Serializable]&#10;public class DailyChecklistResult&#10;{&#10;    public int day;&#10;    public int workersChecked;&#10;    public int workersTotal;&#10;    public int equipmentChecked;&#10;    public int equipmentTotal;&#10;    public int constructionQualityScore; // e.g. 0-100&#10;    public List&lt;string&gt; missedObstacles; // names of missed obstacles&#10;&#10;    public DailyChecklistResult(int day)&#10;    {&#10;        this.day = day;&#10;        missedObstacles = new List&lt;string&gt;();&#10;    }&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
      </map>
    </option>
  </component>
</project>